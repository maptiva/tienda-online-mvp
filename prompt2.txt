Hola. Vamos a reemplazar la página actual de "Detalle del Carrito" por un modal interactivo, como el de nuestro prototipo original. Por favor, sigue estos pasos para implementar la funcionalidad completa:
1. Crear el Componente del Modal (CartModal.jsx):
Crea un nuevo componente en client/src/components/CartModal.jsx (y su archivo de estilos CartModal.module.css).
Este componente debe recibir dos props: isOpen (un booleano para controlar su visibilidad) y onClose (una función para cerrarlo).
Debe usar useContext para acceder al estado del carrito (cart) desde nuestro CartContext.
El layout del modal debe incluir:
Un fondo oscuro semitransparente que cubra toda la página.
La ventana del modal centrada.
Un encabezado con el título "Tu Pedido" y un botón "X" que llame a onClose al hacer clic.
Una sección para el formulario "Completa tus datos para el pedido" con los input para "Nombre y Apellido", "Teléfono de Contacto" y "Dirección de Envío (Opcional)".
Una lista de los productos del carrito. Para cada producto, muestra una pequeña imagen en miniatura (image_url), la cantidad, el nombre y el precio.
El Total del pedido.
El botón verde "Confirmar Pedido por WhatsApp".
2. Integrar el Modal en la Aplicación (App.jsx):
Modifica el archivo client/src/App.jsx.
Elimina la ruta (<Route>) que llevaba a la página del carrito. Ya no la necesitaremos.
Crea un estado para controlar la visibilidad del modal: const [isCartOpen, setIsCartOpen] = useState(false);.
Renderiza el componente <CartModal> al final del return, pasándole las props: <CartModal isOpen={isCartOpen} onClose={() => setIsCartOpen(false)} />.
Pasa una función al componente <Header> para que pueda abrir el modal: <Header onCartClick={() => setIsCartOpen(true)} />.
3. Actualizar el Header para que Abra el Modal:
Modifica el archivo client/src/components/Header.jsx.
Asegúrate de que el ícono del carrito sea un <button>, no un <Link>.
Añádele un onClick que llame a la nueva prop onCartClick que le pasamos desde App.jsx.
4. Implementar la Lógica del Botón de WhatsApp:
Dentro de CartModal.jsx, crea los estados para manejar los input del formulario (nombre, teléfono, dirección).
Crea una función que se ejecute al hacer clic en "Confirmar Pedido por WhatsApp". Esta función debe:
Validar que los campos "Nombre" y "Teléfono" no estén vacíos. Si lo están, debe mostrar un alert.
Construir el mensaje de texto, incluyendo los datos del cliente y la lista de productos del carrito. Si el campo de dirección está vacío, no debe incluir la línea "Dirección:".
Codificar el mensaje y abrir la URL de wa.me en una nueva pestaña.Mejora 1: Añadir "Descripción" a la Página de Detalle
Este es un ajuste muy importante para darle valor a la página de detalle.
Prompt para GCA/CLI:
"Necesito añadir la descripción completa en la página de detalle del producto. Por favor, modifica el archivo client/src/pages/ProductDetail.jsx. Busca dónde se renderiza el nombre y el precio del producto, y justo debajo, añade un nuevo subtítulo que diga <h3>Descripción</h3> y un párrafo <p> que muestre el campo description del producto que se ha cargado desde Supabase."
Mejora 2: Actualizar el Número de WhatsApp
Un ajuste rápido pero vital para que los pedidos lleguen al lugar correcto.
Prompt para GCA/CLI:
"Por favor, actualiza el número de teléfono para los pedidos de WhatsApp. Modifica el archivo client/src/components/CartModal.jsx y busca la función que maneja el envío del formulario. Localiza la variable o constante que define el número de teléfono y reemplázala por el número correcto en formato internacional: 5493456533273.